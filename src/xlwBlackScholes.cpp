//// 
//// Autogenerated by xlw 
//// Do not edit this file, it will be overwritten 
//// by InterfaceGenerator 
////

#include "xlw/MyContainers.h"
#include <xlw/CellMatrix.h>
#include "BlackScholes.h"
#include <xlw/xlw.h>
#include <xlw/XlFunctionRegistration.h>
#include <stdexcept>
#include <xlw/XlOpenClose.h>
#include <xlw/HiResTimer.h>
using namespace xlw;

namespace {
const char* LibraryName = "QuantLab";
};


// registrations start here


namespace
{
XLRegistration::Arg
q_EstandarBlackScholesArgs[]=
{
{ "spot"," spot ","B"},
{ "strike"," strike ","B"},
{ "tipoInteres","  tipoInteres ","B"},
{ "FechaValor","  FechaValor ","B"},
{ "FechaVcto"," FechaVcto ","B"},
{ "Volatilidad"," Volatilidad ","B"},
{ "Dividendos"," Dividendos ","B"},
{ "Call"," true for Call, false for Put ","XLF_OPER"}
};
  XLRegistration::XLFunctionRegistrationHelper
registerq_EstandarBlackScholes("xlq_EstandarBlackScholes",
"q_EstandarBlackScholes",
" Call and Put price with standar log-normal Black-Scholes model ",
LibraryName,
q_EstandarBlackScholesArgs,
8
,false
,false
,""
,""
,false
,false
,false
);
}



extern "C"
{
LPXLFOPER EXCEL_EXPORT
xlq_EstandarBlackScholes(
double spot,
double strike,
double tipoInteres,
double FechaValor,
double FechaVcto,
double Volatilidad,
double Dividendos,
LPXLFOPER Calla)
{
EXCEL_BEGIN;

	if (XlfExcel::Instance().IsCalledByFuncWiz())
		return XlfOper(true);








XlfOper Callb(
	(Calla));
bool Call(
	Callb.AsBool("Call"));

double result(
	q_EstandarBlackScholes(
		spot,
		strike,
		tipoInteres,
		FechaValor,
		FechaVcto,
		Volatilidad,
		Dividendos,
		Call)
	);
return XlfOper(result);
EXCEL_END
}
}



//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoOpen
//////////////////////////

//////////////////////////
// Methods that will get registered to execute in AutoClose
//////////////////////////

